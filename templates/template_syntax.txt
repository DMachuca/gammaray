-----The GSlib parameter files templates-----

When the user creates a new project, GammaRay automatically creates a directory called "templates" inside the project's home directory containing all parameter file templates for all GSLib programs recognized by GammaRay.  The user may have her or his own GSLib-like programs from an ongoing research project or company proprietary programs.  To add support for non-standard GSLib programs, the user must create additional templates in the templates directory, meaning that the user must add new GSLib-like programs to the GSLib home diretory.  Example: suppose the user wants to use a GSLib-like program called mykt3d in GammaRay.  The user then must copy mykt3d.exe (Windows) to the GSLib home directory and provide a parameter file template for the new program.

GammaRay looks in templates directory for all files with the *.par.tpl (notice lower case for Posix operating systems) file name mask and expects for each template that there is the corresponding program in the GSLib home directory based on the template file name.  Example: if GammaRay finds a template called mykt3d.par.tpl file in the templates directory in your project, it will try to find a program called mykt3d.exe (Windows) or mykt3d (Posix OSes).  Mind character case for Posix OSes, for examples: MyKT3d.par.tpl is not a valid template name for a program executable called mykt3d; also mykt3d.pAr.TpL will not be seen as a parameter file template.

The user can also change the templates for the standard GSLib programs if she or he has changed them accordingly, for example, when creating a multi-core version of the sisim program, which may require new parameters.  If you corrupt a standard template, you can just delete it and GammaRay will generate a new functional one upon closing, opening or project change (e.g. adding a new data file).  GammaRay CANNOT generate templates for non-standard GSLib programs, so be careful with your custom templates.

The templates must follow a simple syntax so GammaRay can recognize each parameter, their types and be able to build appropriate GUI for them as well as perform the correct data type conversions so GammaRay can correctly interface to any GSLib-like program.

------Parameter file templates syntax------------------

1) Single-valued parameter types:
Single-valued parameters are the simplest types of parameters.

<file>
Denotes a file path that the user must provide.  GUI is a long edit line with a button to open a file system browsing dialog.
Example:
<file>     -file for PostScript output

<int>
Denotes an integer value that the user can freely enter.  GUI is a line edit field.
Example:
<int>      -number of decimal places (<0 for auto.)

<uint>
Denotes an unsigned integer value that the user can freely enter.  GUI is a line edit field.
Example:
<uint>     -number of classes

<double>
Denotes a double precision floating point value that the user can freely enter.  GUI is a line edit field.
Example:
<double>   -frequency maximum (<0 for automatic)

<option [a:descripion1] [b:description2] ... >
Denotes an option for the user to choose.  First value in list is the default.  The value before the colon is the one that is actually written to the parameter file. The text after the colon is a short descriptive text explaining the option value. GUI is a dropdown menu or similarly purposed widget.
Example:
<option [0:frequency] [1:cumulative histogram]>   -0=frequency,  1=cumulative histogram

<string>
Denotes a general text that the user can freely enter.  Generally used for plot titles, axis labels, etc.  GUI is a larger line edit field than used for types such as <uint>, <double>, etc.
Example:
<string>      -scatter plot title

<range [min:description1] [max:description2]>
Denotes a double precision floating point value within the range specified by min and max.  A short description for each range limit is provided by the text after the colon.  GUI is a slider or similarly purposed widget.  
Example:
<range [-1:L] [1:R]>   -positioning of stats (L to R: -1 to 1)

<color>
An unsigned integer that denotes a color code, generally used to assign colors to categorical variables.  GSLib standard colors are as follows: 1=red, 2=orange, 3=yellow, 4=light green, 5=green, 6=light blue, 7=dark blue, 8=violet, 9=white, 10=black, 11=purple, 12=brown, 13=pink, 14=intermediate green, 15=gray 16=gray 10%, 17=gray 20%, 18=gray 30%, 19=gray 40%, 20=gray 50%, 21=gray 60% 22=gray 70%, 23=gray 80%, 24=gray 90%.  GUI may be a dropdown menu with the color options, which may not exactly match the colors rendered by Ghostscript. 
Example:
<uint> <color> <string> -facies code, facies color, facies name


2) Fixed multi-valued parameters (composed parameter):
Parameters made of more than one value can be specified by placing more than one type placeholder in the same line.  The parameter elements can have different types and will have each its own GUI widget according to its type (see Single-valued parameter types).
Example:
<double> <double>    -attribute minimum and maximum

3) Variable multi-valued parameters (unbound parameter array):
Some parameters may be composed of an unspecified number of values (at least one).  They can be specified by placing a plus sign (+) after a value type.  The user may specify as many values as one needs.  Each parameter element will have its own GUI widget according to its type (see Single-valued parameter types).  The GUI may start with one widget and a "+" button so the user can add more widgets to enter more parameter elements of the same type.
Example:
<uint+> -   columns for variable and weight

4) Named parameters:
You may give a name to a parameter so it can be referenced somewhere else. You specify the name between parenthesis in the type tag.  Parameter names must be unique in a template, otherwise unspecified behaviour may ensue.
<uint (nvarios)>                     -number of variograms

5) Parameter repetiton (bound paramater array):
Some parameters require multiple instances in numbers specified by another parameter, which must be named.  You specify a parameter array with a tag <repeat [variable name]>.  The variable name between the square brackets is the number of lines given by the varibale value.  The parameter lines to be repeated must be indented following Python style (no need for a closing token).  The <repeat> tag itself is not an actual parameter file line and nothing is written to the paramter file for this tag.
Example:
<uint (nvarios)>                     -number of variograms
<repeat [nvarios]>
   <uint> <uint> <uint>              -tail variable, head variable, variogram type

6) Parameter groups: (TODO: se whether all of those groups are being supported)
Some groups of parameters are frequently found together throughout the parameter files.  Such groups can be specified by special placeholders. The user may specify such groups manually, but one will not benefit from the conveniences provided by GammaRay, especially if the user is working with complex workflows, where parameter reuse and dependency visualization will greatly increase productivity.

<limits_double>
Denotes a pair of double values, generaly used to specify limits.  It is a shortcut to the recurring <double> <double> syntax.  GUI is a pair of line edit fields.
Composition:
<double> <double> -attribute minimum and maximum

<input>
Denotes input data specification.
Composition:
<file>               -file with data
<uint+>            -   columns for variables and weights
<double> <double>    -   trimming limits

<grid>
Denotes a grid geometry definition.
Composition:
<uint> <double> <double>    -nx,xmn,xsiz
<uint> <double> <double>    -ny,ymn,ysiz
<uint> <double> <double>    -nz,zmn,zsiz

<vmodel>
Denotes a variogram model definition.
Composition:
<uint (nst)> <double>                                     -nst, nugget effect
<repeat [nst]>
   <option [1:spheric] [2:exponential] [3:gaussian] [4:power law] [5:cosine hole effect]>  <double> <double> <double> <double>                      -it,cc,ang1,ang2,ang3
   <double> <double> <double>                             -a_hmax, a_hmin, a_vert


7) Parameter descriptions:
Place any text after the parameter placeholders and after a hiphen mark.  This extended text will provide helper text to the user.
Example:
<file>   -file with data
